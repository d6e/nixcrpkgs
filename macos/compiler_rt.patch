--- compiler-rt-14.0.6.src/cmake/base-config-ix.cmake
+++ compiler-rt-14.0.6.src.patched/cmake/base-config-ix.cmake
@@ -120,24 +120,6 @@
   "Path where compiler-rt data files should be installed.")
 
 if(APPLE)
-  # On Darwin if /usr/include/c++ doesn't exist, the user probably has Xcode but
-  # not the command line tools (or is using macOS 10.14 or newer). If this is
-  # the case, we need to find the OS X sysroot to pass to clang.
-  if(NOT EXISTS /usr/include/c++)
-    execute_process(COMMAND xcrun -sdk macosx --show-sdk-path
-       OUTPUT_VARIABLE OSX_SYSROOT
-       ERROR_QUIET
-       OUTPUT_STRIP_TRAILING_WHITESPACE)
-    if (NOT OSX_SYSROOT OR NOT EXISTS ${OSX_SYSROOT})
-      message(WARNING "Detected OSX_SYSROOT ${OSX_SYSROOT} does not exist")
-    else()
-      message(STATUS "Found OSX_SYSROOT: ${OSX_SYSROOT}")
-      set(OSX_SYSROOT_FLAG "-isysroot${OSX_SYSROOT}")
-    endif()
-  else()
-    set(OSX_SYSROOT_FLAG "")
-  endif()
-
   option(COMPILER_RT_ENABLE_IOS "Enable building for iOS" On)
   option(COMPILER_RT_ENABLE_WATCHOS "Enable building for watchOS - Experimental" Off)
   option(COMPILER_RT_ENABLE_TVOS "Enable building for tvOS - Experimental" Off)
--- compiler-rt-14.0.6.src/cmake/Modules/AddCompilerRT.cmake
+++ compiler-rt-14.0.6.src.patched/cmake/Modules/AddCompilerRT.cmake
@@ -372,7 +372,7 @@
         set_target_properties(${libname} PROPERTIES IMPORT_PREFIX "")
         set_target_properties(${libname} PROPERTIES IMPORT_SUFFIX ".lib")
       endif()
-      if(APPLE)
+      if(FALSE)
         # Ad-hoc sign the dylibs
         add_custom_command(TARGET ${libname}
           POST_BUILD  
--- compiler-rt-14.0.6.src/lib/fuzzer/FuzzerDefs.h
+++ compiler-rt-14.0.6.src.patched/lib/fuzzer/FuzzerDefs.h
@@ -13,6 +13,7 @@
 #include <cassert>
 #include <cstddef>
 #include <cstdint>
+#include <vector>
 #include <cstdlib>
 #include <cstring>
 #include <string>
--- compiler-rt-14.0.6.src/lib/fuzzer/FuzzerIO.h
+++ compiler-rt-14.0.6.src.patched/lib/fuzzer/FuzzerIO.h
@@ -11,6 +11,8 @@
 #ifndef LLVM_FUZZER_IO_H
 #define LLVM_FUZZER_IO_H
 
+#include <string>
+#include <vector>
 #include "FuzzerDefs.h"
 
 namespace fuzzer {
--- compiler-rt-14.0.6.src/lib/fuzzer/FuzzerCommand.h
+++ compiler-rt-14.0.6.src.patched/lib/fuzzer/FuzzerCommand.h
@@ -12,6 +12,7 @@
 #define LLVM_FUZZER_COMMAND_H
 
 #include <algorithm>
+#include <vector>
 #include "FuzzerDefs.h"
 #include "FuzzerIO.h"
 
--- compiler-rt-14.0.6.src/lib/fuzzer/FuzzerDriver.cpp
+++ compiler-rt-14.0.6.src.patched/lib/fuzzer/FuzzerDriver.cpp
@@ -8,6 +8,8 @@
 //===----------------------------------------------------------------------===//
 // Driver for libFuzzer tests. Executes all tests in the test directory.
 //===----------------------------------------------------------------------===//
+#include <string>
+#include <vector>
 
 #include "FuzzerCommand.h"
 #include "FuzzerIO.h"
--- compiler-rt-14.0.6.src/lib/fuzzer/FuzzerExtFunctionsDlsym.cpp
+++ compiler-rt-14.0.6.src.patched/lib/fuzzer/FuzzerExtFunctionsDlsym.cpp
@@ -14,6 +14,8 @@
 //
 //===----------------------------------------------------------------------===//
 
+#include <string>
+#include <vector>
 #include "FuzzerIO.h"
 
 namespace fuzzer {
--- compiler-rt-14.0.6.src/lib/fuzzer/FuzzerDataFlowTrace.cpp
+++ compiler-rt-14.0.6.src.patched/lib/fuzzer/FuzzerDataFlowTrace.cpp
@@ -8,6 +8,8 @@
 //===----------------------------------------------------------------------===//
 // Implementation of DataFlowTrace.
 //===----------------------------------------------------------------------===//
+#include <string>
+#include <vector>
 
 #include "FuzzerDataFlowTrace.h"
 #include "FuzzerIO.h"
